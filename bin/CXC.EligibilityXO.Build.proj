<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Run">

  <!-- Region Import External target -->

  <Import Project="CXC.EligibilityXO.BuildTasks.tasks" />
  <Import Project="CXC.EligibilityXO.Assembly.Version.Targets"/>
  <Import Project="CXC.EligibilityXO.DbDeploy.targets"/>
  <Import Project="CXC.EligibilityXO.Backup.targets"/>
  
  <!-- EndRegion -->


  <ItemGroup>
    <CXCEngineSolutionFile Include="$(RootDirForSurceCode)\CXC.EligibilityXO.sln"></CXCEngineSolutionFile>
    <UpdateAssemblyVersionTarget Include="CustomAfterMicrosoftCommonTargets=$(MSBuildThisFileDirectory)\CXC.EligibilityXO.Assembly.Version.Targets;Configuration=Release"></UpdateAssemblyVersionTarget>
  </ItemGroup>

  
  <Target Name="Init">

    <PropertyGroup>
      <CurrentTargetName>Init</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    
    <CallTarget Targets="CheckChangeLogTableExist"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />


  </Target>


  <Target Name="DecryptSqlServerValue">

    <PropertyGroup>
      <CurrentTargetName>DecryptSqlServerValue</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(SqlServerName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptSqlServerName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(ApplicationDatabaseName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptSqlApplicationDatabaseName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>


    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(DbDeployDatabaseName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptDbDeployDatabaseName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(DatabaseChangeLogTableName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptDatabaseChangeLogTableName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(ApplicationDatabaseName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptApplicationDatabaseName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>


    <!--Call this target when SqlServerUserName & SqlServerPassword property is empty, else it throws error  -->
    <CallTarget Targets="DecryptSqlServerUserInfoValue" Condition="$(SqlServerUserName) != '' AND $(SqlServerPassword) != '' "></CallTarget>
    
    
    <!-- Removing unnecessary new line and extar space, by default ExecuteRawReader return space and new line in output-->
    <PropertyGroup>
      <DecryptSqlServerName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptSqlServerName), '\s+', '') )</DecryptSqlServerName>
      <DecryptSqlApplicationDatabaseName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptSqlApplicationDatabaseName), '\s+', '') )</DecryptSqlApplicationDatabaseName>
      <DecryptDbDeployDatabaseName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptDbDeployDatabaseName), '\s+', '') )</DecryptDbDeployDatabaseName>
      <DecryptDatabaseChangeLogTableName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptDatabaseChangeLogTableName), '\s+', '') )</DecryptDatabaseChangeLogTableName>
      <DecryptApplicationDatabaseName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptApplicationDatabaseName), '\s+', '') )</DecryptApplicationDatabaseName>
      <DecryptSqlServerUserName>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptSqlServerUserName), '\s+', '') )</DecryptSqlServerUserName>
      <DecryptSqlServerPassword>$([System.Text.RegularExpressions.Regex]::Replace( $(DecryptSqlServerPassword), '\s+', '') )</DecryptSqlServerPassword>
    </PropertyGroup>
    

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>


  <Target Name="DecryptSqlServerUserInfoValue">

    <PropertyGroup>
      <CurrentTargetName>DecryptSqlServerUserInfoValue</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(SqlServerUserName)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptSqlServerUserName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
    
    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(SqlServerPassword)')" ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="DecryptSqlServerPassword" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
    

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>
  
  
  
  <Target Name="CheckChangeLogTableExist" DependsOnTargets="DecryptSqlServerValue">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">CheckChangeLogTableExist</CurrentTargetName>
      <DatabaseConnectionString Condition="$(IsSqlWindowsAuthentication)=='true'">Server=$(DecryptSqlServerName);Initial Catalog=$(DecryptDbDeployDatabaseName);Integrated Security=SSPI</DatabaseConnectionString>
      <DatabaseConnectionString Condition="$(IsSqlWindowsAuthentication)=='false'">Server=$(DecryptSqlServerName);Initial Catalog=$(DecryptDbDeployDatabaseName);User Id=$(DecryptSqlServerUserName);Password=$(DecryptSqlServerPassword)</DatabaseConnectionString>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="true"
      Sql="select case when exists((select * from information_schema.tables where table_name = '$(DecryptDatabaseChangeLogTableName)')) then 1 else 0 end"
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="IsTableExist" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>
    <Message Text="Table status: $(IsTableExist)"></Message>

    <!--Raise an error if changelog table is not exist into dbDeploy database-->
    <Error Text="Please specify assembly version number in property file for this release." Condition=" '$(IsTableExist)' == '0' AND $(AssemblyBuildNumber) == '' "/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>



  <Target Name="CreateFolderStructure">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CreateFolderStructure'">CreateFolderStructure</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <RemoveDir Directories="$(SourceDir)" Condition="$(ForceSourceOverwrite)== 'true'"/>

    <MakeDir Directories="$(RootDir)" Condition="!Exists('$(RootDir)')"/>
    <MakeDir Directories="$(SourceDir)" Condition="!Exists('$(SourceDir)')"/>
    <MakeDir Directories="$(BackupDirForSource)" Condition="!Exists('$(BackupDirForSource)')"/>

    <MakeDir Directories="$(BuildDir)" Condition="!Exists('$(BuildDir)')"/>
    <MakeDir Directories="$(BuildDirForApp)" Condition="!Exists('$(BuildDirForApp)')"/>
    <MakeDir Directories="$(BuildDirForDbDeploy)" Condition="!Exists('$(BuildDirForDbDeploy)')"/>
    <MakeDir Directories="$(BuildDirForWorkflowFiles)" Condition="!Exists('$(BuildDirForWorkflowFiles)')"/>
    <MakeDir Directories="$(BuildDirForConfig)" Condition="!Exists('$(BuildDirForConfig)')"/>
    <MakeDir Directories="$(BuildDirForSqls)" Condition="!Exists('$(BuildDirForSqls)')"/>

    <MakeDir Directories="$(DeploymentDir)" Condition="!Exists('$(DeploymentDir)')"/>
    <MakeDir Directories="$(BackupDirForDeployment)" Condition="!Exists('$(BackupDirForDeployment)')"/>
    <MakeDir Directories="$(DeploymentDirForApp)" Condition="!Exists('$(DeploymentDirForApp)')"/>
    <MakeDir Directories="$(DeploymentDirForDbDeploy)" Condition="!Exists('$(DeploymentDirForDbDeploy)')"/>

    <MakeDir Directories="$(DestinationDir)" Condition="!Exists('$(DestinationDir)')"/>
    <MakeDir Directories="$(BackupDirForDestination)" Condition="!Exists('$(BackupDirForDestination)')"/>

    <MakeDir Directories="$(BackupDirForDatabase)" Condition="!Exists('$(BackupDirForDatabase)')"/>


    <MakeDir Directories="$(BuildDirForCXCCoreSchemaChangesSql)" Condition="!Exists('$(BuildDirForCXCCoreSchemaChangesSql)')"/>
    <MakeDir Directories="$(BuildDirForCXCCoreMetaChangesSql)" Condition="!Exists('$(BuildDirForCXCCoreMetaChangesSql)')"/>





    <MakeDir Directories="$(BuildDirForDbDeployOutput)" Condition="!Exists('$(BuildDirForDbDeployOutput)')"/>

    <MakeDir Directories="$(TempDir)" Condition="!Exists('$(TempDir))')"/>

    <CallTarget Targets="CreateTPASpecificFolderStructure"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="CreateTPASpecificFolderStructure" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <TPAName>%(SolutionName.TPAName)</TPAName>
    </PropertyGroup>
    

    <!-- Below commands creates folder structure for each TPA  -->
    <MakeDir Directories="$(BuildDirForDbDeploy)\$(TPAName)\4.$(TPAName)_MetaChanges" Condition="!Exists('$(BuildDirForDbDeploy)\$(TPAName)\4.$(TPAName)_MetaChanges')"/>
    <MakeDir Directories="$(BuildDirForDbDeploy)\$(TPAName)\3.$(TPAName)_DataChanges" Condition="!Exists('$(BuildDirForDbDeploy)\$(TPAName)\3.$(TPAName)_DataChanges')"/>


    <!-- Below commands creates folder structure in build directory for each TPA  -->
    <MakeDir Directories="$(BuildDirForWorkflowFiles)\$(TPAName)" Condition="!Exists('$(BuildDirForWorkflowFiles)\$(TPAName')"/>

    <MakeDir Directories="$(BuildDirForApp)\$(TPAName)\config" Condition="!Exists('$(BuildDirForApp)\$(TPAName)\config')"/>
    <MakeDir Directories="$(BuildDirForApp)\$(TPAName)\layout" Condition="!Exists('$(BuildDirForApp)\$(TPAName)\layout')"/>
    <MakeDir Directories="$(BuildDirForApp)\$(TPAName)\sqls" Condition="!Exists('$(BuildDirForApp)\$(TPAName)\sqls')"/>

  </Target>

  <Target Name="DownloadPreBuildSourceFromSVN" Condition="$(DownloadSourceCodeFromSVN) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='DownloadPreBuildSourceFromSVN'">DownloadPreBuildSourceFromSVN</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />
    
    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(SvnUsername)')" ConnectionString="$(ApplicationDatabaseConnectionString)">
      <Output PropertyName="UserName" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    
    <MSBuild.ExtensionPack.SqlServer.SqlExecute TaskAction="ExecuteRawReader" UseTransaction="true" Sql="select dbo.DecryptValue('$(SvnPassword)')" ConnectionString="$(ApplicationDatabaseConnectionString)">
      <Output PropertyName="Password" TaskParameter="RawReaderResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <!-- Removing unnecessary new line and extar space, by default ExecuteRawReader return space and new line in output-->
    <PropertyGroup>
      <UserName>$([System.Text.RegularExpressions.Regex]::Replace( $(UserName), '\s+', '') )</UserName>
      <Password>$([System.Text.RegularExpressions.Regex]::Replace( $(Password), '\s+', '') )</Password>
    </PropertyGroup>


    <SvnCheckout  RepositoryPath="$(SVNSourceURL)"
			            LocalPath="$(SourceDir)"
			            UserName="$(UserName)"
			            Password="$(Password)">
      <Output TaskParameter="Revision" PropertyName="Revision" />
    </SvnCheckout>

    <Message Text="Source code downloaded from svn till revision number: $(Revision)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="InitilizeItemGroup">

    <ItemGroup>

      <CXCCoreSolution Include="$(RootDirForSurceCode)\Core\CXC.EligibilityXO.Core.csproj"></CXCCoreSolution>
      <CXCCoreCSharpFiles Include="$(RootDirForSurceCode)\Core\**\*.cs"></CXCCoreCSharpFiles>
      <CXCCoreAssemblyFileName Include="$(RootDirForSurceCode)\Core\Bin\Release\CXC.EligibilityXO.Core.dll"></CXCCoreAssemblyFileName>


      <CXCEngineSolution Include="$(RootDirForSurceCode)\Engine\CXC.EligibilityXO.Engine.csproj"></CXCEngineSolution>
      <CXCEngineCSharpFiles Include="$(RootDirForSurceCode)\Engine\**\*.cs"></CXCEngineCSharpFiles>
      <CXCEngineAssemblyFileName Include="$(RootDirForSurceCode)\Engine\Bin\Release\CXC.EligibilityXO.Engine.exe"></CXCEngineAssemblyFileName>


      <ABGSolutionFile Include="$(RootDirForSurceCode)\TPA\ABG\CXC.EligibilityXO.TPA.ABG.sln"></ABGSolutionFile>
      <ABGCSharpFiles Include="$(RootDirForSurceCode)\TPA\ABG\**\*.cs"></ABGCSharpFiles>
      <ABGAssemblyFile Include="$(RootDirForSurceCode)\TPA\ABG\Bin\Release\CXC.EligibilityXO.TPA.ABG.dll"></ABGAssemblyFile>

      <PrimePaySolution Include="$(RootDirForSurceCode)\TPA\PrimePay\CXC.EligibilityXO.TPA.PrimePay.sln"></PrimePaySolution>
      <PrimePayCSharpFiles Include="$(RootDirForSurceCode)\TPA\PrimePay\**\*.cs"></PrimePayCSharpFiles>
      <PrimePayAssemblyFile Include="$(RootDirForSurceCode)\TPA\PrimePay\Bin\Release\CXC.EligibilityXO.TPA.PrimePay.dll"></PrimePayAssemblyFile>

    </ItemGroup>

  </Target>



  <Target Name="BackupPreBuild">

    <CallTarget Targets="BackupPreBuildDatabase" />
    <CallTarget Targets="BackupPreBuildDestination" />
    <CallTarget Targets="BackupPreBuildSource" />

  </Target>

  <Target Name="BuildSolutions" Condition=" $(OnlyBuildOrOnlyPush) != 'onlypush' ">

    <CallTarget Targets="InitilizeItemGroup"></CallTarget>

    <CallTarget Targets="GetNewAssemblyVersionNumber" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="BuildSolution" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="CopyBuildFilesToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    <CallTarget Targets="CopySqlFilesToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    <CallTarget Targets="CopyWorkFlowScriptToBuildDir" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="ConfigTransformation" Condition=" $(MSBuildLastTaskResult) == 'True'  " />
    
    <CallTarget Targets="GenerateSqlScriptFromDbDeploy" Condition=" $(MSBuildLastTaskResult) == 'True'  " />

    <CallTarget Targets="CreateSVNLabelOnSVN" Condition="$(MSBuildLastTaskResult) == 'True'"/>

  </Target>

  <Target Name="GetNewAssemblyVersionNumber" Condition="$(UpdateBuildVersion)=='true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">GetNewAssemblyVersionNumber</CurrentTargetName>
    </PropertyGroup>


    <CallTarget Targets="GetNewAssemblyVersionNumberFromDatabase" Condition="$(AssemblyBuildNumber)== '' "></CallTarget>
    <CallTarget Targets="WriteAssemblyVersionNumberIntoTempFile" Condition="$(AssemblyBuildNumber) != '' " ></CallTarget>

    
  </Target>

  <Target Name="GetNewAssemblyVersionNumberFromDatabase">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">GetNewAssemblyVersionNumberFromDatabase</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="true"
      Sql="select top 1  ScriptOutput from $(DecryptDatabaseChangeLogTableName) where ScriptOutput!=''  order by CompleteDate desc"
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="PreviousAssemblyVersionNumber" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>

    <Message Text="Previous assembly version number was: $(PreviousAssemblyVersionNumber)"></Message>

    <GenerateNewAssemblyVersionNumber OldAssemblyVersion="$(PreviousAssemblyVersionNumber)" Condition="'$(PreviousAssemblyVersionNumber)' != '' ">
      <Output PropertyName="NewAssemblyVersion" TaskParameter="NewAssemblyVersion"/>
    </GenerateNewAssemblyVersionNumber>

    <Message Text="Setting new assembly version number: $(NewAssemblyVersion)"></Message>

    <WriteLinesToFile File="$(TempAssemblyFile)" Lines="$(NewAssemblyVersion)" Overwrite="true"/>



    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="WriteAssemblyVersionNumberIntoTempFile">

    <!--NOTE: This target will get assembly version number from  environment specific props file and write it on tempAssemblyFile for next step use. -->
    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!=''">WriteAssemblyVersionNumberIntoTempFile</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <WriteLinesToFile File="$(TempAssemblyFile)" Lines="$(AssemblyBuildNumber)" Overwrite="true"/>

    <Message Text="Setting new assembly version number: $(AssemblyBuildNumber)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>



  <Target Name="BuildSolution" DependsOnTargets="BuildEligibilityXOEngine">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildSolution'">BuildSolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="CopyConfigAndSqlFilesBeforeBuildingABGSolution"></CallTarget>
    <CallTarget Targets="BuildABGSolution"></CallTarget>
    
    <CallTarget Targets="CopyConfigAndSqlFilesBeforeBuildingPrimePaySolution"></CallTarget>
    <CallTarget Targets="BuildPrimePaySolution"></CallTarget>

    

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>


  <Target Name="BuildCXCCoreSolution" Inputs="@(CXCCoreCSharpFiles)" Outputs="@(CXCCoreAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCCoreSolution'">BuildCXCCoreSolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCCoreSolution)"
             Properties="@(UpdateAssemblyVersionTarget)" />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>


  <Target Name="BuildCXCEngineSolution" Inputs="@(CXCEngineCSharpFiles)" Outputs="@(CXCEngineAssemblyFileName)">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildCXCDataAccess'">BuildCXCDataAccess</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(CXCEngineSolution)"
             Properties="@(UpdateAssemblyVersionTarget)" />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>



  
  <Target Name="BuildEligibilityXOEngine">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildEligibilityXOEngine'">BuildEligibilityXOEngine</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />
    
    <CallTarget Targets="BuildCXCCoreSolution"></CallTarget>
    <CallTarget Targets="BuildCXCEngineSolution"></CallTarget>
    
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Core\Config $(BuildDirForConfig) -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Core\Build\SchemaChanges $(BuildDirForCXCCoreSchemaChangesSql) -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Core\Build\MetaChanges $(BuildDirForCXCCoreMetaChangesSql) -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Engine\Config $(BuildDirForConfig) -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />


    



  </Target>

  <Target Name="CopyConfigAndSqlFilesBeforeBuildingABGSolution" Condition="$(BuildABG)=='true'">

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\ABG\Config $(BuildDirForApp)\ABG\Config -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\ABG\layout $(BuildDirForApp)\ABG\layout -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\ABG\Build\DataChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\ABG\3.ABG_DataChanges -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\ABG\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\ABG\4.ABG_MetaChanges -c -u' />
    
  </Target>

  <Target Name="CopyConfigAndSqlFilesBeforeBuildingPrimePaySolution" Condition="$(BuildPrimePay)=='true'">

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\Config $(BuildDirForApp)\PrimePay\Config -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\layout $(BuildDirForApp)\PrimePay\layout -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\Build\DataChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\PrimePay\3.PrimePay_DataChanges -c -u' />
    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\TPA\PrimePay\Build\MetaChanges $(BuildDir)\$(DbDeployScriptInputFolderName)\PrimePay\4.PrimePay_MetaChanges -c -u' />


  </Target>

  <Target Name="BuildABGSolution" Inputs="@(ABGCSharpFiles)" Outputs="@(ABGAssemblyFile)" Condition="$(BuildABG)=='true'" >

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildABGSolution'">BuildABGSolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(ABGSolutionFile)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="BuildPrimePaySolution" Inputs="@(PrimePayCSharpFiles)" Outputs="@(PrimePayAssemblyFile)" Condition="$(BuildPrimePay)=='true'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='BuildPrimePaySolution'">BuildPrimePaySolution</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <MSBuild Projects="@(PrimePaySolution)"
             Properties="@(UpdateAssemblyVersionTarget)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="CopyBuildFilesToBuildDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToBuildDir'">CopyBuildFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ItemGroup>
      <BuildFiles Include="$(RootDirForSurceCode)\Engine\bin\Release\*.dll"/>
      <BuildFiles Include="$(RootDirForSurceCode)\Engine\bin\Release\*.exe"/>
      <BuildFiles Include="$(RootDirForSurceCode)\Engine\bin\Release\*.exe.config"/>
    </ItemGroup>

    <Copy SourceFiles="@(BuildFiles)"
			  	DestinationFolder="$(BuildDirForApp)\%(RecursiveDir)"
          SkipUnchangedFiles="true" />


    
    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  <Target Name="CopySqlFilesToBuildDir"  Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this" DependsOnTargets="CopyCXCCoreSqlFilesToBuildDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopySqlFilesToBuildDir'">CopySqlFilesToBuildDir</CurrentTargetName>
      <SourceDirForMetaChangeScript>%(SolutionName.SourceDirForMetaChangeScript)</SourceDirForMetaChangeScript>
      <SourceDirForDataChangeScript>%(SolutionName.SourceDirForDataChangeScript)</SourceDirForDataChangeScript>
      <BuildDirForMetaSqlScript>%(SolutionName.BuildDirForMetaSqlScript)</BuildDirForMetaSqlScript>
      <BuildDirForDataSqlScript>%(SolutionName.BuildDirForDataSqlScript)</BuildDirForDataSqlScript>
    </PropertyGroup>

    <Exec Command='$(LibDir)\ContentSync.exe $(SourceDirForMetaChangeScript) $(BuildDirForMetaSqlScript) -c -u' />

    <Exec Command='$(LibDir)\ContentSync.exe $(SourceDirForDataChangeScript) $(BuildDirForDataSqlScript) -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  <Target Name="CopyCXCCoreSqlFilesToBuildDir" Condition="$(BuildEligibilityXOEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyCXCCoreSqlFilesToBuildDir'">CopyCXCCoreSqlFilesToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ItemGroup>
      <CXCCoreSchemaChangesFiles Include="$(RootDirForSurceCode)\Core\Build\SchemaChanges\**\*.*" />
      <CXCCoreMetaFiles Include="$(RootDirForSurceCode)\Core\Build\MetaChanges\**\*.*" />
    </ItemGroup>

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Core\Build\SchemaChanges $(BuildDirForCXCCoreSchemaChangesSql) -c -u' />

    <Exec Command='$(LibDir)\ContentSync.exe $(RootDirForSurceCode)\Core\Build\MetaChanges $(BuildDirForCXCCoreMetaChangesSql) -c -u' />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  <Target Name="CopyWorkFlowScriptToBuildDir"  Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyWorkFlowScriptToBuildDir'">CopyWorkFlowScriptToBuildDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <PropertyGroup>
      <SourceDirForWorkflowFile>%(SolutionName.SourceDirForWorkflowScript)</SourceDirForWorkflowFile>
      <BuildDirForWorkflowScript>%(SolutionName.BuildDirForWorkflowScript)</BuildDirForWorkflowScript>
    </PropertyGroup>


    <Exec Command='$(LibDir)\ContentSync.exe $(SourceDirForWorkflowFile) $(BuildDirForWorkflowScript) -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  

  <Target Name="ConfigTransformation">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTransformation'">ConfigTransformation</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <CallTarget Targets="ConfigTranformationForCXCCore"></CallTarget>
    <CallTarget Targets="ConfigTranformationForTPA"></CallTarget>

    <CallTarget Targets="ConfigTranformationForDbDeploy"></CallTarget>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    


  </Target>

  <Target Name="ConfigTranformationForCXCCore" Condition="$(BuildEligibilityXOEngine) == 'true' ">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForCXCCore'">ConfigTranformationForCXCCore</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\StateParams.xml"
      OutputFiles="$(BuildDirForApp)\config\StateParams.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\CoreParams.xml"
      OutputFiles="$(BuildDirForApp)\config\CoreParams.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForApp)\config\DataAccess.xml"
      OutputFiles="$(BuildDirForApp)\config\DataAccess.xml"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
          ToolPath="$(LibDir)"
          InputFiles="$(BuildDirForApp)\config\AlertParams.xml"
          OutputFiles="$(BuildDirForApp)\config\AlertParams.xml"
          SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
          Environment="$(Environment)"
          Clean="$(XmlPreprocessorCleanFile)"
          Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
             ToolPath="$(LibDir)"
             InputFiles="$(BuildDirForApp)\config\Archiver.xml"
             OutputFiles="$(BuildDirForApp)\config\Archiver.xml"
             SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
             Environment="$(Environment)"
             Clean="$(XmlPreprocessorCleanFile)"
             Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
            ToolPath="$(LibDir)"
            InputFiles="$(BuildDirForApp)\config\Notifier.xml"
            OutputFiles="$(BuildDirForApp)\config\Notifier.xml"
            SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
            Environment="$(Environment)"
            Clean="$(XmlPreprocessorCleanFile)"
            Validate="$(XmlPreprocessorValidateFile)" />


    <XmlPreprocess
           ToolPath="$(LibDir)"
           InputFiles="$(BuildDirForApp)\CXC.EligibilityXO.Engine.exe.config"
           OutputFiles="$(BuildDirForApp)\CXC.EligibilityXO.Engine.exe.config"
           SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
           Environment="$(Environment)"
           Clean="$(XmlPreprocessorCleanFile)"
           Validate="$(XmlPreprocessorValidateFile)" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="ConfigTranformationForTPA" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForTPA'">ConfigTranformationForTPA</CurrentTargetName>
      <BuildDirForStateParamXmlFile>%(SolutionName.BuildDirForStateParamXmlFile)</BuildDirForStateParamXmlFile>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <XmlPreprocess
      ToolPath="$(LibDir)"
      InputFiles="$(BuildDirForStateParamXmlFile)"
      OutputFiles="$(BuildDirForStateParamXmlFile)"
      SpreadsheetFiles="$(ConfigValuesSpreadsheetFileLocation)"
      Environment="$(Environment)"
  	  Clean="$(XmlPreprocessorCleanFile)"
	    Validate="$(XmlPreprocessorValidateFile)" />


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="ConfigTranformationForDbDeploy">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='ConfigTranformationForDbDeploy'">ConfigTranformationForDbDeploy</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <!--Convert mssql_apply.vm.tt file to mssql_apply.vm file-->
    <Copy SourceFiles="$(LibDir)\Resources\mssql_apply.vm.tt" DestinationFiles="$(LibDir)\Resources\mssql_apply.vm"></Copy>
    <!--Convert mssql_undo.vm.tt file to mssql_undo.vm file-->
    <Copy SourceFiles="$(LibDir)\Resources\mssql_undo.vm.tt" DestinationFiles="$(LibDir)\Resources\mssql_undo.vm"></Copy>

    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_apply.vm"
                  FindWord="USE #ELIGIBILITYXODATABASE#"
                  ReplaceWithWord="USE [$(DecryptSqlApplicationDatabaseName)]" />


    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_apply.vm"
                  FindWord="USE #DBDEPLOYDATABASE#"
                  ReplaceWithWord="USE [$(DecryptDbDeployDatabaseName)]" />


    <FindAndReplace
                  Filename="$(LibDir)\Resources\mssql_undo.vm"
                  FindWord="USE #DBDEPLOYDATABASE#"
                  ReplaceWithWord="USE [$(DecryptDbDeployDatabaseName)]" />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>


  <Target Name="CreateSVNLabelOnSVN" Condition="$(CreateSVNLabel) == 'True'">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CreateSVNLabelOnSVN'">CreateSVNLabelOnSVN</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <ReadLinesFromFile File="@(GeneratedAssemblyFileName)">
      <Output TaskParameter="Lines" PropertyName="VersionNumber" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <SvnDestinationPath Condition="'$(VersionNumber)' != '' ">$(SVNTagURL)/$(Environment)_$(CurrentDateTime)_$(VersionNumber)</SvnDestinationPath>
      <SvnDestinationPath Condition="'$(VersionNumber)' == '' ">$(SVNTagURL)/$(Environment)_$(CurrentDateTime)</SvnDestinationPath>
    </PropertyGroup>

    <SvnCopy SourcePath="$(SVNSourceURL)"
      DestinationPath="$(SvnDestinationPath)"
      Message="Manoj_$(CurrentDate)_$(VersionNumber)"
      Username="$(SvnUsername)" password="$(SvnPassword)"/>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>




  <Target Name="PostBuild" Condition=" $(OnlyBuildOrOnlyPush) != 'onlypush' ">

    <CallTarget Targets="CopyBuildFilesToDeploymentDir"  Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="CopyDbDeployOutputFilesToDeploymentDir" Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="CopyWorkflowScriptsToDeploymentDir"  Condition="$(MSBuildLastTaskResult) == 'True' "/>
    <CallTarget Targets="BackupPostBuildDeployment"  Condition="$(MSBuildLastTaskResult) == 'True' "/>

  </Target>

  <!--DO NOT CHANGE THIS TARGET NAME, IT'S BEING USED BY CUSTOM LOGGER-->
  <Target Name="CopyBuildFilesToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToDeploymentDir'">CopyBuildFilesToDeploymentDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Message Text = "Start copying files from $(BuildDirForApp) to $(DeploymentDirForApp)"></Message>

    <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForApp) $(DeploymentDirForApp) -c -u' />

    <Message Text = "Completed copying files from $(BuildDirForApp) to $(DeploymentDirForApp)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  <!--DO NOT CHANGE THIS TARGET NAME, IT'S BEING USED BY CUSTOM LOGGER-->
  <Target Name="CopyDbDeployOutputFilesToDeploymentDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyDbDeployOutputFilesToDeploymentDir'">CopyDbDeployOutputFilesToDeploymentDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <ItemGroup>
      <DbDeployFiles Include="$(BuildDirForDbDeployOutput)\*.*" />
    </ItemGroup>

    <Message Text = "Start copying files from $(BuildDirForDbDeployOutput) to $(DeploymentDirForDbDeploy)"></Message>

    <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForDbDeployOutput) $(DeploymentDirForDbDeploy) -c -u' />

    <Message Text = "Completed copying files from $(BuildDirForDbDeployOutput) to $(DeploymentDirForDbDeploy)"></Message>



    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  <Target Name="CopyWorkflowScriptsToDeploymentDir" Inputs="%(SolutionName.Identity)" Outputs="%(SolutionName.Identity)\Ignore_this">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyWorkflowScriptsToDeploymentDir'">CopyWorkflowScriptsToDeploymentDir</CurrentTargetName>
      <BuildDirForWorkflowScript>%(SolutionName.BuildDirForWorkflowScript)</BuildDirForWorkflowScript>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Exec Command='$(LibDir)\ContentSync.exe $(BuildDirForWorkflowScript) $(DeploymentDirForApp) -c -u' />

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>

  

  <Target Name="DeployBuildToDestination" Condition=" $(OnlyBuildOrOnlyPush) == 'onlypush' or $(OnlyBuildOrOnlyPush) == '' " >

    <CallTarget Targets="CopyBuildFilesToDestinationDir"  />

    <CallTarget Targets="UpdateDestinationDatabase" Condition="$(MSBuildLastTaskResult) == 'True' " />

    <CallTarget Targets="SaveAssemblyVersionInDestinationDatabase" Condition="$(MSBuildLastTaskResult) == 'True' " />


  </Target>

  <Target Name="CopyBuildFilesToDestinationDir">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='CopyBuildFilesToDestinationDir'">CopyBuildFilesToDestinationDir</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />

    <Message Text = "Start copying files from $(DeploymentDirForApp) to $(DestinationDir)"></Message>

    <ItemGroup>
      <DeploymentAppDir Include="$(DeploymentDirForApp)\**\*.*" />
    </ItemGroup>

    <Exec Command='$(LibDir)\ContentSync.exe $(DeploymentDirForApp) $(DestinationDir) -c -u' />

    <Message Text = "Completed copying files from $(DeploymentDirForApp) to $(DestinationDir)"></Message>

    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    

  </Target>

  <Target Name="SaveAssemblyVersionInDestinationDatabase" Condition="Exists(@(GeneratedAssemblyFileName))">

    <PropertyGroup>
      <CurrentTargetName Condition="'$(CurrentTargetName)'!='SaveAssemblyVersionInDestinationDatabase'">SaveAssemblyVersionInDestinationDatabase</CurrentTargetName>
    </PropertyGroup>

    <Message Text="============= $(CurrentTargetName) target has been started. ============= " />


    <MSBuild.ExtensionPack.SqlServer.SqlExecute
      TaskAction="ExecuteScalar"
      UseTransaction="false"
      Sql="select max(ScriptNumber) from $(DecryptDatabaseChangeLogTableName) where Folder='Dummy' "
      ConnectionString="$(DatabaseConnectionString)">
      <Output PropertyName="MaxScriptNumberFromDbDeployDatabase" TaskParameter="ScalarResult"/>
    </MSBuild.ExtensionPack.SqlServer.SqlExecute>


    <MSBuild.ExtensionPack.Science.Maths TaskAction="Add" Numbers="$(MaxScriptNumberFromDbDeployDatabase);1">
      <Output PropertyName="NextScriptNumberForDbDeployDatabase" TaskParameter="Result"/>
    </MSBuild.ExtensionPack.Science.Maths>


    <ReadLinesFromFile File="@(GeneratedAssemblyFileName)">
      <Output TaskParameter="Lines" PropertyName="AssemblyVersionNumber" />
    </ReadLinesFromFile>

    <PropertyGroup>
      <CommandLineSqlForInsertNewAssemblyVersionNumber>Use $(DecryptDbDeployDatabaseName) INSERT INTO $(DecryptDatabaseChangeLogTableName) VALUES('Dummy', $(NextScriptNumberForDbDeployDatabase), 'DummyScript', GETDATE(), GETDATE(),'dbo','1',  '$(AssemblyVersionNumber)' )</CommandLineSqlForInsertNewAssemblyVersionNumber>
    </PropertyGroup>

    <MSBuild.ExtensionPack.SqlServer.SqlCmd
      TaskAction="Execute"
      Server="$(DecryptSqlServerName)"
      Database="$(DecryptDbDeployDatabaseName)"
      CommandLineQuery="$(CommandLineSqlForInsertNewAssemblyVersionNumber)"
      Condition="$(IsSqlWindowsAuthentication)=='true'"/>



    <MSBuild.ExtensionPack.SqlServer.SqlCmd
      TaskAction="Execute"
      Server="$(DecryptSqlServerName)"
      Database="$(DecryptDbDeployDatabaseName)"
      LogOn="$(DecryptSqlServerUserName)"
      Password="$(DecryptSqlServerPassword)"
      CommandLineQuery="$(CommandLineSqlForInsertNewAssemblyVersionNumber)"
      Condition="$(IsSqlWindowsAuthentication)=='false'"/>


    <Message Text="============= $(CurrentTargetName) target has been completed. ============= " />

    
  </Target>


  <Target Name="CleanTempFiles">

    <RemoveDir Directories="$(TempDir)" />

    <ItemGroup>
      <DeleteTempErrorLog Include="$(TempDirForLog)/**/*.*" Exclude="$(ErrorLogFileName)" />
    </ItemGroup>

    <Delete Files="@(DeleteTempErrorLog)" ContinueOnError="true" />


  </Target>


  <Target Name="Build">

    <CallTarget Targets="Init"></CallTarget>

    <CallTarget Targets="CreateFolderStructure" Condition="$(OnlyBuildOrOnlyPush) != 'onlypush' " />

    <CallTarget Targets="DownloadPreBuildSourceFromSVN" Condition="$(MSBuildLastTaskResult) == 'True' and $(OnlyBuildOrOnlyPush) != 'onlypush' "/>

    <CallTarget Targets="BackupPreBuild" Condition="$(MSBuildLastTaskResult) == 'True' and $(OnlyBuildOrOnlyPush) != 'onlypush' "></CallTarget>

    <CallTarget Targets="BuildSolutions"></CallTarget>

    <CallTarget Targets="PostBuild"></CallTarget>

    <CallTarget Targets="DeployBuildToDestination"></CallTarget>

  </Target>


  <Target Name="Run">

    <Exec Command="C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe $(MSBuildThisFile) /t:Build /logger:$(LibDir)\CXC.CustomLogger.dll;FromEmailAddress=alertsqa@cxcnetwork.com;ToEmailAddress=manojs@cxcnetwork.com /noconsolelogger "/>
    <CallTarget Targets="CleanTempFiles" Condition="$(MSBuildLastTaskResult) == 'True' and ($(OnlyBuildOrOnlyPush) == 'onlypush' or $(OnlyBuildOrOnlyPush) == '') " />
    
  </Target>


</Project>